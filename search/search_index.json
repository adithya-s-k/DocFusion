{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OmniDocs","text":"<p>OmniDocs is a powerful framework that simplifies document understanding and analysis. It provides a unified, production-ready interface for essential document processing tasks including:</p> <ul> <li>Layout Analysis &amp; Detection</li> <li>OCR &amp; Text Extraction</li> <li>Table Detection &amp; Extraction</li> <li>Reading Order Detection</li> <li>Document Understanding &amp; Analysis</li> </ul> <p>By abstracting away the complexities of integrating multiple libraries and models, OmniDocs enables developers to build robust document processing workflows with minimal effort. Whether you're working with academic papers, business documents, or complex technical materials, OmniDocs provides the tools you need to extract, analyze, and understand document content efficiently.</p>"},{"location":"#installation","title":"\ud83d\udd27 Installation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li><code>pip</code> package manager</li> <li>Optional (for GPU support): A compatible NVIDIA GPU with CUDA 12.1</li> </ul>"},{"location":"#setting-up-your-environment","title":"Setting Up Your Environment","text":"<p>To set up your environment, you can choose one of the following methods:</p> <ol> <li> <p>Using <code>conda</code>:    <pre><code>conda create -n omnidocs python=3.11\nconda activate omnidocs\n</code></pre></p> </li> <li> <p>Using <code>venv</code>:    <pre><code>python3 -m venv omnidocs\nsource omnidocs/bin/activate  # For Linux/macOS\n.\\omnidocs\\Scripts\\activate   # For Windows\n</code></pre></p> </li> <li> <p>Using <code>poetry</code>:    <pre><code>poetry new omnidocs\ncd omnidocs\npoetry install\n</code></pre></p> </li> </ol>"},{"location":"#installing-pytorch","title":"Installing PyTorch","text":"<p>To install PyTorch, choose one of the following options based on whether you want GPU support:</p> <ul> <li> <p>With GPU support (CUDA 12.1):    <pre><code>pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121\n</code></pre></p> </li> <li> <p>Without GPU support:    <pre><code>pip install torch torchvision torchaudio\n</code></pre></p> </li> </ul>"},{"location":"#installing-omnidocs","title":"Installing OmniDocs","text":"<p>Once your environment is set up and PyTorch is installed, you can install OmniDocs:</p> <ol> <li> <p>From PyPI:    <pre><code>pip install omnidocs\n</code></pre></p> </li> <li> <p>From source:    If you prefer to install directly from the source, you can use the following command:    <pre><code>pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"#getting-started","title":"\ud83d\udee0\ufe0f Getting Started","text":"<p>Here's a quick example to demonstrate the power of OmniDocs:</p> <pre><code>tutorial coming soon\n</code></pre> \ud83d\udcda Supported Models and Libraries <p>OmniDocs integrates seamlessly with a variety of popular tools, including:</p> <ul> <li>\u2705 : working and tested</li> <li>\u23f3 : planned/in-progress support</li> <li>\u274c : no support</li> </ul> Layout Analysis Detection Model Source License CPU GPU Info \u2705DocLayout YOLO GitHub - DocLayout-YOLO AGPL-3.0 \u23f3 \u2705 A robust layout detection model based on YOLO-v10, designed for diverse document types. \u2705PPStructure (Paddle OCR) GitHub - PaddleOCR Apache 2.0 \u2705 \u2705 An OCR tool that supports multiple languages and provides layout detection capabilities. \u2705RT DETR (Docling) GitHub - RT-DETR MIT \u23f3 \u2705 Implementation of RT-DETR, a real-time detection transformer focusing on object detection tasks. \u2705Florence-2-DocLayNet-Fixed Hugging Face - Florence-2-DocLayNet-Fixed MIT \u274c \u2705 Fine-tuned model for document layout analysis, improving bounding box accuracy in document images. \u2705Surya Layout GitHub - Surya GPL-3.0-or-later \u2705 \u2705 OCR and layout analysis tool supporting 90+ languages, including reading order and table recognition. \u23f3Layout LM V3 Hugging Face - LayoutLMv3 CC BY-NC-SA 4.0 \u23f3 \u23f3 A pre-trained multimodal Transformer for Document AI, effective for various document understanding tasks. \u23f3Fast / Faster R CNN / MR CNN GitHub - Faster R-CNN MIT \u23f3 \u23f3 A library implementing the Faster R-CNN architecture for object detection, widely used in layout tasks. Text Extraction Extraction Libraries Source License CPU GPU Info PyPDF2 GitHub - PyPDF2 MIT \u2705 \u2705 A library for extracting text from PDFs. PyMuPDF GitHub - PyMuPDF MIT \u2705 \u2705 A library for extracting text from PDFs. pdfplumber GitHub - pdfplumber MIT \u2705 \u2705 A library for extracting text from PDFs. Docling Parse GitHub - Docling MIT \u23f3 \u23f3 A library for extracting text from PDFs. OCR OCR Library Source License CPU GPU Info Paddle OCR GitHub - PaddleOCR Apache 2.0 \u2705 \u2705 An OCR tool that supports multiple languages and provides layout detection capabilities. Tesseract GitHub - Tesseract BSD-3-Clause \u2705 \u2705 An open-source OCR engine that supports multiple languages and is widely used for text extraction from images. EasyOCR GitHub - EasyOCR MIT \u2705 \u2705 A simple and easy-to-use OCR library that supports multiple languages and is built on PyTorch. Table Extraction Extraction Libraries/Models Source License CPU GPU Info PPStructure (Paddle OCR) GitHub - PaddleOCR Apache 2.0 \u2705 \u2705 An OCR tool that supports multiple languages and provides layout detection capabilities. Camelot GitHub - Camelot MIT \u2705 \u2705 A Python library for extracting tables from PDFs. Tabula GitHub - Tabula MIT \u2705 \u2705 A tool for extracting tables from PDFs. Table Transformer GitHub - Table Transformer MIT \u23f3 \u23f3 A transformer model for table extraction. TableFormer (Docling) GitHub - Docling MIT \u23f3 \u23f3 A transformer model for table extraction."},{"location":"#how-it-works","title":"\ud83c\udfd7\ufe0f How It Works","text":"<p>OmniDocs organizes document processing tasks into modular components. Each component corresponds to a specific task and offers:</p> <ol> <li>A Unified Interface: Consistent input and output formats.</li> <li>Model Independence: Switch between libraries or models effortlessly.</li> <li>Pipeline Flexibility: Combine components to create custom workflows.</li> </ol>"},{"location":"#roadmap","title":"\ud83d\udcc8 Roadmap","text":"<ul> <li>Add support for semantic understanding tasks (e.g., entity extraction).</li> <li>Integrate pre-trained transformer models for context-aware document analysis.</li> <li>Expand pipelines for multilingual document processing.</li> <li>Add CLI support for batch processing.</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions to OmniDocs! Here's how you can help:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Commit your changes and open a pull request.</li> </ol> <p>For more details, refer to our CONTRIBUTING.md.</p>"},{"location":"#license","title":"\ud83d\udee1\ufe0f License","text":"<p>This project is licensed under multiple licenses, depending on the models and libraries you use in your pipeline. Please refer to the individual licenses of each component for specific terms and conditions.</p>"},{"location":"#support-the-project","title":"\ud83c\udf1f Support the Project","text":"<p>If you find OmniDocs helpful, please give us a \u2b50 on GitHub and share it with others in the community.</p>"},{"location":"#join-the-community","title":"\ud83d\udde8\ufe0f Join the Community","text":"<p>For discussions, questions, or feedback:</p> <ul> <li>Issues: Report bugs or suggest features here.</li> <li>Email: Reach out at adithyaskolavi@gmail.com</li> </ul>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#from-pypi","title":"From PyPI","text":"<pre><code>pip install omnidocs\n</code></pre>"},{"location":"getting_started/quickstart/","title":"Quick Start","text":""},{"location":"getting_started/quickstart/#quick-start","title":"Quick Start\u00b6","text":"<pre>pip install omnidocs\n</pre>"},{"location":"tasks/layout_analysis/overview/","title":"Layout Analysis","text":""},{"location":"tasks/layout_analysis/tutorials/florence/","title":"Florence","text":""},{"location":"tasks/layout_analysis/tutorials/florence/#florence-layout-analysis","title":"Florence Layout Analysis\u00b6","text":"<pre>from omnidocs.tasks.layout_analysis import FlorenceLayoutAnalyzer\n</pre>"},{"location":"tasks/layout_analysis/tutorials/paddle/","title":"PaddleOCR","text":""},{"location":"tasks/layout_analysis/tutorials/paddle/#paddleocr-layout-analysis","title":"PaddleOCR Layout Analysis\u00b6","text":"<pre>from omnidocs.tasks.layout_analysis import PaddleLayoutAnalyzer\n</pre>"},{"location":"tasks/layout_analysis/tutorials/rtdetr/","title":"RT-DETR","text":""},{"location":"tasks/layout_analysis/tutorials/rtdetr/#rt-detr-layout-analysis","title":"RT-DETR Layout Analysis\u00b6","text":"<pre>from omnidocs.tasks.layout_analysis import RTLayoutAnalyzer\n</pre>"},{"location":"tasks/layout_analysis/tutorials/surya/","title":"Surya","text":""},{"location":"tasks/layout_analysis/tutorials/surya/#surya-layout-analysis","title":"Surya Layout Analysis\u00b6","text":"<pre>from omnidocs.tasks.layout_analysis import SuryaLayoutAnalyzer\n</pre>"},{"location":"tasks/layout_analysis/tutorials/yolo/","title":"DocLayout YOLO","text":""},{"location":"tasks/layout_analysis/tutorials/yolo/#doclayout-yolo","title":"DocLayout YOLO\u00b6","text":"<pre>from omnidocs.tasks.layout_analysis import YOLOLayoutAnalyzer\n</pre>"},{"location":"tasks/math_extraction/overview/","title":"Math Extraction","text":""},{"location":"tasks/math_extraction/tutorials/latex_ocr/","title":"LaTeX OCR","text":""},{"location":"tasks/math_extraction/tutorials/latex_ocr/#latex-ocr","title":"LaTeX OCR\u00b6","text":"<pre>from omnidocs.tasks.math_extraction import LatexOCR\n</pre>"},{"location":"tasks/math_extraction/tutorials/unimathnet/","title":"UnimerNet","text":""},{"location":"tasks/math_extraction/tutorials/unimathnet/#unimernet","title":"UnimerNet\u00b6","text":"<pre>from omnidocs.tasks.math_extraction import UniMathNet\n</pre>"},{"location":"tasks/ocr/overview/","title":"OCR","text":""},{"location":"tasks/ocr/tutorials/easyocr/","title":"EasyOCR","text":""},{"location":"tasks/ocr/tutorials/easyocr/#easy-ocr","title":"Easy OCR\u00b6","text":""},{"location":"tasks/ocr/tutorials/paddle/","title":"Paddle OCR","text":""},{"location":"tasks/ocr/tutorials/paddle/#paddle-ocr","title":"Paddle OCR\u00b6","text":""},{"location":"tasks/ocr/tutorials/tesseract/","title":"Tesseract","text":""},{"location":"tasks/ocr/tutorials/tesseract/#tesseract","title":"Tesseract\u00b6","text":""},{"location":"tasks/table_extraction/overview/","title":"Table Extraction","text":""},{"location":"tasks/table_extraction/tutorials/camelot/","title":"Camelot","text":""},{"location":"tasks/table_extraction/tutorials/camelot/#camelot","title":"Camelot\u00b6","text":""},{"location":"tasks/table_extraction/tutorials/pdfplumber/","title":"PDFPlumber","text":""},{"location":"tasks/table_extraction/tutorials/pdfplumber/#pdf-plumber","title":"PDF plumber\u00b6","text":""},{"location":"tasks/text_extraction/tutorials/pdfplumber/","title":"PDF plumber","text":""},{"location":"tasks/text_extraction/tutorials/pdfplumber/#pdf-plumber","title":"PDF plumber\u00b6","text":""},{"location":"tasks/text_extraction/tutorials/pymupdf/","title":"PyMuPDF","text":""},{"location":"tasks/text_extraction/tutorials/pymupdf/#pymupdf","title":"PyMuPDF\u00b6","text":""},{"location":"tasks/text_extraction/tutorials/pypdf2/","title":"PYPDF2","text":""},{"location":"tasks/text_extraction/tutorials/pypdf2/#pypdf2","title":"PYPDF2\u00b6","text":""},{"location":"workflows/invoice_parser/implementation/","title":"Invoice Extraction","text":""},{"location":"workflows/invoice_parser/implementation/#parse-invoice","title":"Parse Invoice\u00b6","text":"<pre>from omnidocs.workflows.invoice_parser import InvoiceParser\n</pre>"},{"location":"workflows/pdf_to_md/implementation/","title":"PDF to Markdown","text":""},{"location":"workflows/pdf_to_md/implementation/#convert-pdf-to-markdown","title":"Convert PDF to Markdown\u00b6","text":"<pre>from omnidocs.workflows.pdf_to_md import PDFToMarkdown\n</pre>"}]}